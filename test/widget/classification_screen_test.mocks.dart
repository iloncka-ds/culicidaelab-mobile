// Mocks generated by Mockito 5.4.6 from annotations
// in culicidaelab/test/widget/classification_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i12;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i13;
import 'dart:ui' as _i8;

import 'package:flutter_gen/gen_l10n/app_localizations.dart' as _i6;
import 'package:image_picker/image_picker.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:culicidaelab/models/disease_model.dart' as _i10;
import 'package:culicidaelab/models/mosquito_model.dart' as _i2;
import 'package:culicidaelab/services/classification_service.dart' as _i9;
import 'package:culicidaelab/view_models/classification_view_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStopwatch_0 extends _i1.SmartFake implements Stopwatch {
  _FakeStopwatch_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClassificationResult_1 extends _i1.SmartFake
    implements _i2.ClassificationResult {
  _FakeClassificationResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_2 extends _i1.SmartFake implements _i3.File {
  _FakeFile_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_3 extends _i1.SmartFake implements Uri {
  _FakeUri_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_4 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_5 extends _i1.SmartFake
    implements _i3.FileSystemEntity {
  _FakeFileSystemEntity_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_6 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRandomAccessFile_7 extends _i1.SmartFake
    implements _i3.RandomAccessFile {
  _FakeRandomAccessFile_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSink_8 extends _i1.SmartFake implements _i3.IOSink {
  _FakeIOSink_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileStat_9 extends _i1.SmartFake implements _i3.FileStat {
  _FakeFileStat_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ClassificationViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassificationViewModel extends _i1.Mock
    implements _i4.ClassificationViewModel {
  MockClassificationViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ClassificationState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i4.ClassificationState.initial,
          )
          as _i4.ClassificationState);

  @override
  bool get hasImage =>
      (super.noSuchMethod(Invocation.getter(#hasImage), returnValue: false)
          as bool);

  @override
  bool get isProcessing =>
      (super.noSuchMethod(Invocation.getter(#isProcessing), returnValue: false)
          as bool);

  @override
  bool get shouldShowDiseaseRiskButton =>
      (super.noSuchMethod(
            Invocation.getter(#shouldShowDiseaseRiskButton),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setState(_i4.ClassificationState? state) => super.noSuchMethod(
    Invocation.method(#setState, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void setImageFile(_i3.File? file) => super.noSuchMethod(
    Invocation.method(#setImageFile, [file]),
    returnValueForMissingStub: null,
  );

  @override
  void setResult(_i2.ClassificationResult? result) => super.noSuchMethod(
    Invocation.method(#setResult, [result]),
    returnValueForMissingStub: null,
  );

  @override
  void setErrorMessage(String? message) => super.noSuchMethod(
    Invocation.method(#setErrorMessage, [message]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> initModel(_i6.AppLocalizations? localizations) =>
      (super.noSuchMethod(
            Invocation.method(#initModel, [localizations]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> pickImage(
    _i7.ImageSource? source,
    _i6.AppLocalizations? localizations,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#pickImage, [source, localizations]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> classifyImage(_i6.AppLocalizations? localizations) =>
      (super.noSuchMethod(
            Invocation.method(#classifyImage, [localizations]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ClassificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassificationService extends _i1.Mock
    implements _i9.ClassificationService {
  MockClassificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Stopwatch get stopwatch =>
      (super.noSuchMethod(
            Invocation.getter(#stopwatch),
            returnValue: _FakeStopwatch_0(this, Invocation.getter(#stopwatch)),
          )
          as Stopwatch);

  @override
  _i5.Future<void> loadModel() =>
      (super.noSuchMethod(
            Invocation.method(#loadModel, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.ClassificationResult> classifyImage(_i3.File? imageFile) =>
      (super.noSuchMethod(
            Invocation.method(#classifyImage, [imageFile]),
            returnValue: _i5.Future<_i2.ClassificationResult>.value(
              _FakeClassificationResult_1(
                this,
                Invocation.method(#classifyImage, [imageFile]),
              ),
            ),
          )
          as _i5.Future<_i2.ClassificationResult>);

  @override
  _i5.Future<List<_i2.MosquitoSpecies>> getAllMosquitoSpecies() =>
      (super.noSuchMethod(
            Invocation.method(#getAllMosquitoSpecies, []),
            returnValue: _i5.Future<List<_i2.MosquitoSpecies>>.value(
              <_i2.MosquitoSpecies>[],
            ),
          )
          as _i5.Future<List<_i2.MosquitoSpecies>>);

  @override
  _i5.Future<List<_i10.Disease>> getAllDiseases() =>
      (super.noSuchMethod(
            Invocation.method(#getAllDiseases, []),
            returnValue: _i5.Future<List<_i10.Disease>>.value(<_i10.Disease>[]),
          )
          as _i5.Future<List<_i10.Disease>>);

  @override
  _i5.Future<_i2.MosquitoSpecies?> getMosquitoSpeciesById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getMosquitoSpeciesById, [id]),
            returnValue: _i5.Future<_i2.MosquitoSpecies?>.value(),
          )
          as _i5.Future<_i2.MosquitoSpecies?>);

  @override
  _i5.Future<_i10.Disease?> getDiseaseById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getDiseaseById, [id]),
            returnValue: _i5.Future<_i10.Disease?>.value(),
          )
          as _i5.Future<_i10.Disease?>);

  @override
  _i5.Future<List<_i10.Disease>> getDiseasesByVector(String? speciesName) =>
      (super.noSuchMethod(
            Invocation.method(#getDiseasesByVector, [speciesName]),
            returnValue: _i5.Future<List<_i10.Disease>>.value(<_i10.Disease>[]),
          )
          as _i5.Future<List<_i10.Disease>>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i3.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.File get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeFile_2(this, Invocation.getter(#absolute)),
          )
          as _i3.File);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_3(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i3.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_4(this, Invocation.getter(#parent)),
          )
          as _i3.Directory);

  @override
  _i5.Future<_i3.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #recursive: recursive,
              #exclusive: exclusive,
            }),
            returnValue: _i5.Future<_i3.File>.value(
              _FakeFile_2(
                this,
                Invocation.method(#create, [], {
                  #recursive: recursive,
                  #exclusive: exclusive,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.File>);

  @override
  void createSync({bool? recursive = false, bool? exclusive = false}) =>
      super.noSuchMethod(
        Invocation.method(#createSync, [], {
          #recursive: recursive,
          #exclusive: exclusive,
        }),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.File> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i5.Future<_i3.File>.value(
              _FakeFile_2(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i5.Future<_i3.File>);

  @override
  _i3.File renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeFile_2(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i3.File);

  @override
  _i5.Future<_i3.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i5.Future<_i3.FileSystemEntity>.value(
              _FakeFileSystemEntity_5(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i5.Future<_i3.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i3.File> copy(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copy, [newPath]),
            returnValue: _i5.Future<_i3.File>.value(
              _FakeFile_2(this, Invocation.method(#copy, [newPath])),
            ),
          )
          as _i5.Future<_i3.File>);

  @override
  _i3.File copySync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copySync, [newPath]),
            returnValue: _FakeFile_2(
              this,
              Invocation.method(#copySync, [newPath]),
            ),
          )
          as _i3.File);

  @override
  _i5.Future<int> length() =>
      (super.noSuchMethod(
            Invocation.method(#length, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);

  @override
  _i5.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessed, []),
            returnValue: _i5.Future<DateTime>.value(
              _FakeDateTime_6(this, Invocation.method(#lastAccessed, [])),
            ),
          )
          as _i5.Future<DateTime>);

  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessedSync, []),
            returnValue: _FakeDateTime_6(
              this,
              Invocation.method(#lastAccessedSync, []),
            ),
          )
          as DateTime);

  @override
  _i5.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastAccessed, [time]),
            returnValue: _i5.Future<dynamic>.value(),
          )
          as _i5.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastAccessedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<DateTime> lastModified() =>
      (super.noSuchMethod(
            Invocation.method(#lastModified, []),
            returnValue: _i5.Future<DateTime>.value(
              _FakeDateTime_6(this, Invocation.method(#lastModified, [])),
            ),
          )
          as _i5.Future<DateTime>);

  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastModifiedSync, []),
            returnValue: _FakeDateTime_6(
              this,
              Invocation.method(#lastModifiedSync, []),
            ),
          )
          as DateTime);

  @override
  _i5.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastModified, [time]),
            returnValue: _i5.Future<dynamic>.value(),
          )
          as _i5.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastModifiedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i3.RandomAccessFile> open({
    _i3.FileMode? mode = _i3.FileMode.read,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#open, [], {#mode: mode}),
            returnValue: _i5.Future<_i3.RandomAccessFile>.value(
              _FakeRandomAccessFile_7(
                this,
                Invocation.method(#open, [], {#mode: mode}),
              ),
            ),
          )
          as _i5.Future<_i3.RandomAccessFile>);

  @override
  _i3.RandomAccessFile openSync({_i3.FileMode? mode = _i3.FileMode.read}) =>
      (super.noSuchMethod(
            Invocation.method(#openSync, [], {#mode: mode}),
            returnValue: _FakeRandomAccessFile_7(
              this,
              Invocation.method(#openSync, [], {#mode: mode}),
            ),
          )
          as _i3.RandomAccessFile);

  @override
  _i5.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(
            Invocation.method(#openRead, [start, end]),
            returnValue: _i5.Stream<List<int>>.empty(),
          )
          as _i5.Stream<List<int>>);

  @override
  _i3.IOSink openWrite({
    _i3.FileMode? mode = _i3.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openWrite, [], {
              #mode: mode,
              #encoding: encoding,
            }),
            returnValue: _FakeIOSink_8(
              this,
              Invocation.method(#openWrite, [], {
                #mode: mode,
                #encoding: encoding,
              }),
            ),
          )
          as _i3.IOSink);

  @override
  _i5.Future<_i13.Uint8List> readAsBytes() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, []),
            returnValue: _i5.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
          )
          as _i5.Future<_i13.Uint8List>);

  @override
  _i13.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytesSync, []),
            returnValue: _i13.Uint8List(0),
          )
          as _i13.Uint8List);

  @override
  _i5.Future<String> readAsString({
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [], {#encoding: encoding}),
            returnValue: _i5.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [], {#encoding: encoding}),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  String readAsStringSync({_i12.Encoding? encoding = const _i12.Utf8Codec()}) =>
      (super.noSuchMethod(
            Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            ),
          )
          as String);

  @override
  _i5.Future<List<String>> readAsLines({
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLines, [], {#encoding: encoding}),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  List<String> readAsLinesSync({
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i5.Future<_i3.File> writeAsBytes(
    List<int>? bytes, {
    _i3.FileMode? mode = _i3.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsBytes,
              [bytes],
              {#mode: mode, #flush: flush},
            ),
            returnValue: _i5.Future<_i3.File>.value(
              _FakeFile_2(
                this,
                Invocation.method(
                  #writeAsBytes,
                  [bytes],
                  {#mode: mode, #flush: flush},
                ),
              ),
            ),
          )
          as _i5.Future<_i3.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i3.FileMode? mode = _i3.FileMode.write,
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(#writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i3.File> writeAsString(
    String? contents, {
    _i3.FileMode? mode = _i3.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [contents],
              {#mode: mode, #encoding: encoding, #flush: flush},
            ),
            returnValue: _i5.Future<_i3.File>.value(
              _FakeFile_2(
                this,
                Invocation.method(
                  #writeAsString,
                  [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush},
                ),
              ),
            ),
          )
          as _i5.Future<_i3.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i3.FileMode? mode = _i3.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeAsStringSync,
      [contents],
      {#mode: mode, #encoding: encoding, #flush: flush},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i5.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i5.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i5.Future<_i3.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i5.Future<_i3.FileStat>.value(
              _FakeFileStat_9(this, Invocation.method(#stat, [])),
            ),
          )
          as _i5.Future<_i3.FileStat>);

  @override
  _i3.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_9(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i3.FileStat);

  @override
  _i5.Stream<_i3.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i5.Stream<_i3.FileSystemEvent>.empty(),
          )
          as _i5.Stream<_i3.FileSystemEvent>);
}
